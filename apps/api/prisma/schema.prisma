generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  SRE
  VIEWER
}

model Org {
  id          String        @id @default(cuid())
  name        String
  plan        String        @default("free")
  createdAt   DateTime      @default(now())
  users       UserOrgRole[]
  services    Service[]
  incidents   Incident[]
  runbooks    Runbook[]
  queries     Query[]
  connections Connection?
}

model User {
  id       String        @id @default(cuid())
  email    String        @unique
  name     String?
  accounts Account[]
  sessions Session[]
  roles    UserOrgRole[]
  Query    Query[]
}

model UserOrgRole {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  org    Org    @relation(fields: [orgId], references: [id])
  orgId  String
  role   Role

  @@unique([userId, orgId])
}

model Connection {
  id              String @id @default(cuid())
  org             Org    @relation(fields: [orgId], references: [id])
  orgId           String @unique
  elasticEndpoint String
  elasticApiKey   String
  gcpProject      String
  gcpSaEmail      String
  gcsBucket       String
  vertexLocation  String
}

model Service {
  id        String     @id @default(cuid())
  org       Org        @relation(fields: [orgId], references: [id])
  orgId     String
  name      String
  team      String?
  repoUrl   String?
  sloTarget Float?
  incidents Incident[]
  runbooks  Runbook[]
}

model Incident {
  id            String    @id @default(cuid())
  org           Org       @relation(fields: [orgId], references: [id])
  orgId         String
  service       Service?  @relation(fields: [serviceId], references: [id])
  serviceId     String?
  severity      String
  startedAt     DateTime
  resolvedAt    DateTime?
  summary       String?
  postmortemUrl String?
}

model Query {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  queryText String
  tookMs    Int
  mode      String // bm25 | vector | hybrid | rerank
  createdAt DateTime @default(now())
}

model Runbook {
  id        String   @id @default(cuid())
  org       Org      @relation(fields: [orgId], references: [id])
  orgId     String
  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?
  title     String
  sourceUri String
  tags      String[]
}

/**
 * Needed because User references Account and Session
 */
model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime
}
